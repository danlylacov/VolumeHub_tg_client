import os
import time
from datetime import datetime

import pandas as pd
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.types import ParseMode, ContentType, InputFile
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv.main import load_dotenv
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from adminDB import UsersDataBase
from apsched import send_message_interval, subscription_reminder
from keyboards import start_keyboard, payment_keyboard, PRICES_FOR_PAYMENT, promo_pay_keyboard

load_dotenv()
API_TOKEN = os.environ['BOT_TOKEN']
PAYMENT_TOKEN = os.environ['PAYMENT_TOKEN']

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)



class UserStates(StatesGroup):
    get_promo_state = State()


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    db = UsersDataBase()
    db.add_user(userid=message.from_user.id,  username=message.from_user.username)
    db.db.close()
    await bot.send_message(message.chat.id, "üôã ‚Äç–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç VolumeHub!\n\n"
                                            "üìç –ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç?\n\n"
                                            "‚úÖ –°—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–∏–Ω—É—Ç–Ω—ã—Ö —Å–≤–µ—á–µ–π –ø–æ 146 –∞–∫—Ü–∏—è–º –º–æ—Å–±–∏—Ä–∂–∏(–ø–µ—Ä–≤—ã–π –∏ –≤—Ç–æ—Ä–æ–π —ç—à–µ–ª–æ–Ω—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –Ω–∞ 100%).\n\n"
                                            "‚úÖ –ï—Å–ª–∏ –æ–±—ä—ë–º (–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã) –∑–∞ –º–∏–Ω—É—Ç—É –ø—Ä–µ–≤—ã—à–∞–µ—Ç 97.5% –º–∏–Ω—É—Ç–Ω–æ–≥–æ –æ–±—ä—ë–º–∞ (–∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã) –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é, –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n\n"
                                            "üëáüëáüëá"
                                            "–ù–∞—à –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π telegram-–∫–∞–Ω–∞–ª: https://t.me/volumeHub",
                           reply_markup=start_keyboard)






@dp.message_handler(commands=['admin_4_zDvrPlEG_getusers'])
async def get_users(message: types.Message):
    db = UsersDataBase()
    users = db.get_all_users()
    db.db.close()
    result = ''
    users_with_sub = 0
    users_without_sub = 0

    data = []
    columns = ['id', 'userId', 'Username', 'Subscription']

    for user in users:
        result += str(user) + '\n'

        if user[3] == '-':
            users_without_sub += 1
        else:
            date_str = str(user[3]).split('.')[0]
            date_format = "%Y-%m-%d %H:%M:%S"
            subscription_datetime = datetime.strptime(date_str, date_format)

            if subscription_datetime > datetime.now():
                users_with_sub += 1

        data.append(user)

    df = pd.DataFrame(data, columns=columns)

    excel_filename = 'users_data.xlsx'
    df.to_excel(excel_filename, index=False)

    users_document = InputFile(excel_filename)
    await bot.send_document(message.chat.id, users_document,
                            caption='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–≥–æ: ' + str(len(users)) +
                                    '\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π: ' + str(users_with_sub) +
                                    '\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏: ' + str(users_without_sub))


@dp.message_handler(commands=['admin_4_zDvrPlEG_getpayments'])
async def get_payments(message: types.Message):
    db = UsersDataBase()
    payments = db.get_all_payments()
    db.db.close()

    df = pd.DataFrame(payments, columns=['id', 'paymentId', 'fromId', 'firstName', 'username', 'lngCode', 'currencu',
                                         'totalAmount', 'date'])  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫

    df.to_excel('payments.xlsx', index=False)

    payments_document = InputFile('payments.xlsx')
    await bot.send_document(message.chat.id, payments_document)


@dp.message_handler(content_types=['text'])
async def menu(message: types.Message):
    if message.text == '‚Ñπ–û –±–æ—Ç–µ‚Ñπ':
        await bot.send_message(message.chat.id,
                               'ü§ù <a href="https://telegra.ph/Polzovatelskoe-soglashenie-01-03-2">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ</a>\n\n'
                               'üìå <a href="https://telegra.ph/O-proekte-VolumeHub-01-13">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é</a>\n\n\n'
                               '–ù–∞—à –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π telegram-–∫–∞–Ω–∞–ª: https://t.me/volumeHub', parse_mode='HTML',
                               disable_web_page_preview=True
                               )

    if message.text == 'üìå–ü–æ–¥–ø–∏—Å–∫–∞üìå':
        db = UsersDataBase()
        await bot.send_message(message.chat.id, str(db.get_subscription_text()), reply_markup=payment_keyboard)
        db.db.close()

    if message.text == 'üë§–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Çüë§':
        db = UsersDataBase()
        date = db.get_subscription(message.from_user.id).split()[0]
        db.db.close()
        text = f'üôã–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}!\n\nüìç–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {date}'
        await bot.send_message(message.from_user.id, text)


    if message.text == 'üíå–ü—Ä–æ–º–æ–∫–æ–¥üíå':
        await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:')
        await UserStates.get_promo_state.set()


@dp.message_handler(state=UserStates.get_promo_state)
async def process_answer(message: types.Message, state: FSMContext):
    promo = message.text

    if promo == 'VOLUMEHUB2024':
        await message.reply(
            text="–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –ø–æ –æ—á–µ–Ω—å —Å–æ—á–Ω—ã–º —Ü–µ–Ω–∞–º, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=promo_pay_keyboard
        )
    else:
        await message.reply(f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥!")

    await state.finish()


@dp.callback_query_handler(lambda c: c.data)
async def get_payment_link(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == '30':
        await bot.send_invoice(callback_query.from_user.id,
                               title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞",
                               description='–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–º–æ–≤ –Ω–∞ 30 –¥–Ω–µ–π',
                               provider_token=PAYMENT_TOKEN,
                               currency='rub',
                               is_flexible=False,
                               prices=[PRICES_FOR_PAYMENT[0]],
                               start_parameter="one-month",
                               payload='30_days')
    elif callback_query.data == '90':
        await bot.send_invoice(callback_query.from_user.id,
                               title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞",
                               description='–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–º–æ–≤ –Ω–∞ 90 –¥–Ω–µ–π',
                               provider_token=PAYMENT_TOKEN,
                               currency='rub',
                               is_flexible=False,
                               prices=[PRICES_FOR_PAYMENT[1]],
                               start_parameter="one-month",
                               payload='90_days')
    elif callback_query.data == '365':
        await bot.send_invoice(callback_query.from_user.id,
                               title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞",
                               description='–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–º–æ–≤ –Ω–∞ 365 –¥–Ω–µ–π',
                               provider_token=PAYMENT_TOKEN,
                               currency='rub',
                               is_flexible=False,
                               prices=[PRICES_FOR_PAYMENT[2]],
                               start_parameter="one-month",
                               payload='365_days')
    elif callback_query.data == 'test':
        db = UsersDataBase()
        subscription = db.get_subscription(callback_query.from_user.id)
        if subscription == '-':
            db.give_subscription_to_user(7, callback_query.from_user.id)
            await bot.send_message(callback_query.from_user.id, "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 7 –¥–Ω–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
        else:
            await bot.send_message(callback_query.from_user.id, "–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥!")
        db.db.close()
    elif callback_query.data == 'promo30':
        await bot.send_invoice(callback_query.from_user.id,
                               title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞",
                               description='–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–º–æ–≤ –Ω–∞ 30 –¥–Ω–µ–π',
                               provider_token=PAYMENT_TOKEN,
                               currency='rub',
                               is_flexible=False,
                               prices=[PRICES_FOR_PAYMENT[3]],
                               start_parameter="one-month",
                               payload='30_days')

    elif callback_query.data == 'promo90':
        await bot.send_invoice(callback_query.from_user.id,
                               title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞",
                               description='–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–º–æ–≤ –Ω–∞ 90 –¥–Ω–µ–π',
                               provider_token=PAYMENT_TOKEN,
                               currency='rub',
                               is_flexible=False,
                               prices=[PRICES_FOR_PAYMENT[4]],
                               start_parameter="one-month",
                               payload='90_days')


@dp.pre_checkout_query_handler(lambda query: True)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    print(pre_checkout_q)
    db = UsersDataBase()
    prices = db.get_prices()
    db.add_payment(int(pre_checkout_q.id), int(pre_checkout_q.from_user.id), pre_checkout_q.from_user.first_name,
                   pre_checkout_q.from_user.username,
                   pre_checkout_q.from_user.language_code, pre_checkout_q.currency,
                   int(pre_checkout_q.total_amount) // 100)
    if str(pre_checkout_q.total_amount // 100) == prices[0]:
        db.give_subscription_to_user(30, int(pre_checkout_q.from_user.id))
    if str(pre_checkout_q.total_amount // 100) == prices[1]:
        db.give_subscription_to_user(90, int(pre_checkout_q.from_user.id))
    if str(pre_checkout_q.total_amount // 100) == prices[2]:
        db.give_subscription_to_user(365, int(pre_checkout_q.from_user.id))
    db.db.close()
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def succsessful_payment(message: types.Message):
    await bot.send_message(message.chat.id,
                           '–ü–ª–∞—Ç–µ–∂ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à telegram-–∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: https://t.me/volumeHub')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞
async def send_message_to_user(chat_id, text, photo_path=None):
    if photo_path:
        with open(photo_path, 'rb') as photo:
            await bot.send_photo(chat_id, photo, caption=text, parse_mode=ParseMode.MARKDOWN)
    else:
        await bot.send_message(chat_id, text, parse_mode=ParseMode.MARKDOWN)


async def on_startup(dp):
    scheduler = AsyncIOScheduler(timezone='Europe/Moscow')

    first_run_time = datetime.now().replace(second=20)



    scheduler.add_job(send_message_interval, trigger='cron', second='20', kwargs={'bot_old': bot})
    scheduler.add_job(subscription_reminder, trigger='cron', hour='19', minute='0', kwargs={'bot_old': bot})

    scheduler.start()
    print('–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω!')


if __name__ == "__main__":
    while True:
        try:
            executor.start_polling(dp, on_startup=on_startup, skip_updates=False)
        except:
            print('rebooting bot_old...')
            time.sleep(1)

