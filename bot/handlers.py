from aiogram import types
from aiogram.dispatcher import FSMContext

from states import UserStates
from utils import load_html_message
from keyboards import start_keyboard, payment_keyboard, PRICES_FOR_PAYMENT, promo_pay_keyboard
import os


def register_handlers(dp):
    @dp.message_handler(commands=['start'])
    async def start(message: types.Message):
        await dp.bot.send_message(
            message.chat.id,
            load_html_message("messages/start_message.html"),
            parse_mode='HTML',
            disable_web_page_preview=True,
            reply_markup=start_keyboard
        )


    @dp.message_handler(text='‚Ñπ–û –±–æ—Ç–µ‚Ñπ')
    async def about_bot(message: types.Message):
        await dp.bot.send_message(
            message.chat.id,
            load_html_message("messages/about.html"),
            parse_mode='HTML',
            disable_web_page_preview=True
        )

    @dp.message_handler(text='üìå–ü–æ–¥–ø–∏—Å–∫–∞üìå')
    async def subscription_info(message: types.Message):
        await dp.bot.send_message(
            message.chat.id,
            load_html_message("messages/subscription.html"),
            parse_mode='HTML',
            disable_web_page_preview=True,
            reply_markup=payment_keyboard
        )

    @dp.message_handler(text='üë§–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Çüë§')
    async def account_info(message: types.Message):
        await dp.bot.send_message(
            message.chat.id,
            load_html_message("messages/account.html"),
            parse_mode='HTML',
            disable_web_page_preview=True
        )

    @dp.message_handler(text='üíå–ü—Ä–æ–º–æ–∫–æ–¥üíå')
    async def promo_start(message: types.Message):
        await dp.bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:')
        await UserStates.get_promo_state.set()


    @dp.message_handler(content_types=['text'])
    async def unknown_command(message: types.Message):
        await message.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é!")


    @dp.message_handler(state=UserStates.get_promo_state, content_types=['text'])
    async def process_promo(message: types.Message, state: FSMContext):
        promo = message.text.strip()
        if promo == 'VOLUMEHUB2024':
            await message.reply(
                "–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –ø–æ —Å–Ω–∏–∂–µ–Ω–Ω–æ–π —Ü–µ–Ω–µ:",
                reply_markup=promo_pay_keyboard
            )
        else:
            await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥!", reply_markup=start_keyboard)
        await state.finish()

    @dp.message_handler(state=UserStates.get_promo_state, content_types=types.ContentType.ANY)
    async def invalid_promo_input(message: types.Message, state: FSMContext):
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞!")


    @dp.callback_query_handler(lambda c: c.data)
    async def get_payment_link(callback_query: types.CallbackQuery):
        PAYMENT_TOKEN = os.environ['PAYMENT_TOKEN']
        if callback_query.data == '30':
            await dp.bot.send_invoice(
                callback_query.from_user.id,
                title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞",
                description='–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–º–æ–≤ –Ω–∞ 30 –¥–Ω–µ–π',
                provider_token=PAYMENT_TOKEN,
                currency='rub',
                is_flexible=False,
                prices=[PRICES_FOR_PAYMENT[0]],
                start_parameter="one-month",
                payload='30_days'
            )
        elif callback_query.data == '90':
            await dp.bot.send_invoice(
                callback_query.from_user.id,
                title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞",
                description='–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–º–æ–≤ –Ω–∞ 90 –¥–Ω–µ–π',
                provider_token=PAYMENT_TOKEN,
                currency='rub',
                is_flexible=False,
                prices=[PRICES_FOR_PAYMENT[1]],
                start_parameter="one-month",
                payload='90_days'
            )
        elif callback_query.data == '365':
            await dp.bot.send_invoice(
                callback_query.from_user.id,
                title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞",
                description='–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–º–æ–≤ –Ω–∞ 365 –¥–Ω–µ–π',
                provider_token=PAYMENT_TOKEN,
                currency='rub',
                is_flexible=False,
                prices=[PRICES_FOR_PAYMENT[2]],
                start_parameter="one-month",
                payload='365_days'
            )
        elif callback_query.data == 'test':
            # TODO: –∑–∞–ø—Ä–æ—Å—ã –∏–∑ –±–∞–∑—ã
            subscription = '-'  # –ó–∞–≥–ª—É—à–∫–∞, –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            if subscription == '-':
                await dp.bot.send_message(callback_query.from_user.id, "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 7 –¥–Ω–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
            else:
                await dp.bot.send_message(callback_query.from_user.id, "–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥!")
        elif callback_query.data == 'promo30':
            await dp.bot.send_invoice(
                callback_query.from_user.id,
                title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞",
                description='–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–º–æ–≤ –Ω–∞ 30 –¥–Ω–µ–π (–ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É)',
                provider_token=PAYMENT_TOKEN,
                currency='rub',
                is_flexible=False,
                prices=[PRICES_FOR_PAYMENT[3]],
                start_parameter="one-month",
                payload='30_days'
            )
        elif callback_query.data == 'promo90':
            await dp.bot.send_invoice(
                callback_query.from_user.id,
                title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞",
                description='–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–º–æ–≤ –Ω–∞ 90 –¥–Ω–µ–π (–ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É)',
                provider_token=PAYMENT_TOKEN,
                currency='rub',
                is_flexible=False,
                prices=[PRICES_FOR_PAYMENT[4]],
                start_parameter="one-month",
                payload='90_days'
            )


    @dp.pre_checkout_query_handler(lambda query: True)
    async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
        await dp.bot.send_message(pre_checkout_q.from_user.id, "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –ø–ª–∞—Ç–µ–∂...")
        await dp.bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


    @dp.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT)
    async def successful_payment(message: types.Message):
        await dp.bot.send_message(
            message.chat.id,
            '–ü–ª–∞—Ç–µ–∂ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à telegram-–∫–∞–Ω–∞–ª: <a href="https://t.me/volumeHub">https://t.me/volumeHub</a>',
            parse_mode='HTML'
        )